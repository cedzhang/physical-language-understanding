{"task_id": 32, "prompt_task_ids": [25, 41, 16, 33, 45, 56, 19, 42, 59, 14], "prompt_text": "/**\n * WebPPL generative model of a blockworld.\n */\nvar makeBlockWorld = function () {\n\n    //// Distributions and parameters ////\n\n    var truncGeom = function (p, m, n) {\n        if (m > n) {\n            return uniformDraw(_.range(1, n + 1));\n        } else {\n            return flip(p) ? truncGeom(p, m + 1, n) : m;\n        }\n    }\n\n    var dim = 10;\n    var tableSize = 100;\n    var worldWidth = 600;\n    var worldHeight = 500;\n    var color = function () { return flip() ? 'red' : 'yellow' };\n    var monoColor = flip(1.0);\n    var stackHeight = function () { return truncGeom(0.7, 1, 8) };\n    var numStacks = truncGeom(0.5, 1, 8);\n    var xpositions = _.range(worldWidth / 2 - tableSize, worldWidth / 2 + tableSize + 20, 20);\n\n    //// Object definitions ////\n\n    var ground = {\n        shape: 'rect',\n        static: true,\n        dims: [100000 * worldWidth, 10],\n        x: worldWidth / 2,\n        y: worldHeight\n    }\n\n    var table = {\n        shape: 'rect',\n        static: false,\n        dims: [tableSize, tableSize],\n        x: worldWidth / 2,\n        y: 390,\n        color: 'blue'\n    }\n\n    var force = function () {\n        var left = flip();\n        return {\n            shape: 'square',\n            static: false,\n            dims: [uniformDraw([15, 16, 17, 18])],\n            x: left ? 100 : worldWidth - 100,\n            y: 310,\n            color: 'green',\n            velocity: left ? [10000, 0] : [-10000, 0]\n        }\n    }\n\n    //// Make stacks ////\n\n    var xposOnTable = function (options) {\n        return uniformDraw(options);\n    }\n\n    var xpos = function (prevBlock) {\n        return prevBlock.x\n    }\n\n    var ypos = function (prevBlock, h) {\n        var prevY = prevBlock.y;\n        var prevH = prevBlock.dims[1];\n        return prevY - (prevH + h)\n    }\n\n    var addBlock = function (prevBlock, isFirst) {\n        var xposition = xposOnTable(xpositions);\n        if (isFirst) {\n            var index = xpositions.indexOf(xposition);\n            xpositions.splice(index, 1);\n        }\n        return {\n            shape: 'rect',\n            color: isFirst || !monoColor ? color() : prevBlock.color,\n            static: false,\n            dims: [dim, dim],\n            x: isFirst ? xposition : xpos(prevBlock),\n            y: ypos(prevBlock, dim)\n        }\n    }\n\n    var stack = function (stackSoFar, h) {\n        var newBlock = addBlock(stackSoFar[stackSoFar.length - 1], false);\n        var theStack = stackSoFar.concat(newBlock);\n        if (stackSoFar.length >= h) {\n            return stackSoFar;\n        } else {\n            return stack(theStack, h);\n        }\n    }\n\n    var makeStacks = function (stacksSoFar, n) {\n        var height = stackHeight();\n        var newStack = stack([addBlock(table, true)], height);\n        var stacks = stacksSoFar.concat([newStack]);\n        if (stacksSoFar.length >= n) {\n            return stacksSoFar;\n        } else {\n            return makeStacks(stacks, n);\n        }\n    }\n\n    var getStackInfo = function (stack) {\n        var color = monoColor ? stack[0].color : 'mixed';\n        var height = stack[0].y - stack[stack.length - 1].y + 2 * dim;\n        return {\n            blocks: stack,\n            color: color,\n            x: stack[0].x,\n            height: height\n        }\n    }\n\n    var realStack = function (stack) {\n        return stack.length >= 2;\n    }\n\n    //// Make world ////\n\n    var rawStacks = makeStacks([], numStacks);\n    var blockList = rawStacks.flat();\n    var rawStacks = filter(realStack, rawStacks);\n    var stacks = map(getStackInfo, rawStacks);\n    var world = {\n        stacks: stacks,\n        blocks: blockList,\n        ground: ground,\n        table: table,\n        force: force()\n    }\n    return world;\n}\n\n///////////////////\n//// Semantics ////\n///////////////////\n\nvar isRed = function (obj) {\n    return obj.color == 'red';\n}\n\nvar isYellow = function (obj) {\n    return obj.color == 'yellow';\n}\n\nvar isTall = function (stack) {\n    return stack.height >= 100;\n}\n\nvar isShort = function (stack) {\n    return stack.height <= 60;\n}\n\nvar isOnLeft = function (obj) {\n    return obj.x <= 270;\n}\n\nvar isOnRight = function (obj) {\n    return obj.x >= 330;\n}\n\nvar isOnMiddle = function (obj) {\n    return !isOnLeft(obj) && !isOnRight(obj);\n}\n\nvar isOnEdge = function (obj) {\n    return obj.x == 200 || obj.x == 400;\n}\n\nvar isOnCenter = function (obj) {\n    return obj.x == 300;\n}\n\nvar isOnGround = function (obj) {\n    return obj.y > 400;\n}\n\nvar isNear = function (obj1) {\n    return function (obj2) {\n        return Math.abs(obj1.x - obj2.x) <= 40;\n    }\n}\n\n/**\n * Example:\n * There are many blocks on the table. Most of the blocks on the table are yellow. All of the blocks on the middle of the table are red.\n */\n\n// There are many blocks on the table. \ncondition(world.blocks.length >= 6);\n\n// Most of the blocks on the table are yellow.\ncondition(filter(isYellow, world.blocks).length > world.blocks.length/2);\n\n// All of the blocks on the middle of the table are red.\ncondition(filter(isOnMiddle, world.blocks).length > 0 && all(isRed, filter(isOnMiddle, world.blocks)));\n\n/**\n * Example:\n * There are many red blocks on the left side of the table, and there is at most one stack of yellow blocks on the right side.\n */\n\n// There are many red blocks on the left side of the table.\ncondition(filter(isOnLeft, filter(isRed, world.blocks)).length >= 6);\n\n// There is at most one stack of yellow blocks on the right side.\ncondition(filter(isOnRight, filter(isYellow, world.stacks)).length <= 1);\n\n/**\n * Example:\n * There are short stacks of red blocks, and there are short stacks of yellow blocks.\n */\n\n// There are short stacks of red blocks.\ncondition(filter(isShort, filter(isRed, world.stacks)).length > 0);\n\n// There are short stacks of yellow blocks.\ncondition(filter(isShort, filter(isYellow, world.stacks)).length > 0);\n\n/**\n * Example:\n * There are at most six yellow blocks on the table, and there are no more than four red blocks on the table.\n */\n\n// There are at most six yellow blocks on the table.\ncondition(filter(isYellow, world.blocks).length <= 6);\n\n// There are no more than four red blocks on the table.\ncondition(filter(isRed, world.blocks).length <= 4);\n\n/**\n * Example:\n * There are four red blocks on the left side of the table, and there are no less than five yellow blocks on the right side.\n */\n\n// There are four red blocks on the left side of the table.\ncondition(filter(isOnLeft, filter(isRed, world.blocks)).length == 4);\n\n// There are no less than five yellow blocks on the right side.\ncondition(filter(isOnRight, filter(isYellow, world.blocks)).length >= 5);\n\n/**\n * Example:\n * There are a few tall stacks of red blocks, and there are four stacks of yellow blocks.\n */\n\n// There are a few tall stacks of red blocks.\ncondition(filter(isTall, filter(isRed, world.stacks)).length > 1 && filter(isTall, filter(isRed, world.stacks)).length <= 4);\n\n// There are four stacks of yellow blocks.\ncondition(filter(isYellow, world.stacks).length == 4);\n\n/**\n * Example:\n * There is one stack of yellow blocks on the left side of the table, and there are two stacks of red blocks on the middle.\n */\n\n// There is one stack of yellow blocks on the left side of the table.\ncondition(filter(isOnLeft, filter(isYellow, world.stacks)).length == 1);\n\n// There are two stacks of red blocks on the middle.\ncondition(filter(isOnMiddle, filter(isRed, world.stacks)).length == 2);\n\n/**\n * Example:\n * There is one stack of yellow blocks on the left side of the table, and there are some red blocks on the middle.\n */\n\n// There is one stack of yellow blocks on the left side of the table.\ncondition(filter(isOnLeft, filter(isYellow, world.stacks)).length == 1);\n\n// There are some red blocks on the middle.\ncondition(filter(isOnMiddle, filter(isRed, world.blocks)).length > 0);\n\n/**\n * Example:\n * There is one tall stack of yellow blocks on the middle of the table, and there are some red blocks near the yellow stack.\n */\n\n// There is one tall stack of yellow blocks on the middle of the table.\ncondition(filter(isOnMiddle, filter(isTall, filter(isYellow, world.stacks))).length == 1);\n\n// There are some red blocks near the yellow stack.\ncondition(filter(isNear(filter(isOnMiddle, filter(isTall, filter(isYellow, world.stacks)))[0]), filter(isRed, world.blocks)).length > 0);\n\n/**\n * Example:\n * There are tall stacks of red blocks, and there are short stacks of yellow blocks.\n */\n\n// There are tall stacks of red blocks.\ncondition(filter(isTall, filter(isRed, world.stacks)).length > 0);\n\n// There are short stacks of yellow blocks.\ncondition(filter(isShort, filter(isYellow, world.stacks)).length > 0);\n\n/**\n * Example:\n * There are at least seven red blocks on the table, and there are many yellow blocks on the table.\n */\n"}